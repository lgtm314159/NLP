pattern set names;

enamex		:= [ENAMEX TYPE=NameType];

when enamex	add [constit cat=name pa=[head=NameType number=singular]];

//  pattern set for noun and verb groups

pattern set chunks;

//  pattern for noun groups

ng := 		det-pos? [constit cat=adj]* [constit cat=n number=singular]* [constit cat=n pa=PA-noun] |
		[constit cat=pro pa=PA-noun];

det-pos	    :=	[constit cat=det] |
		[constit cat=det]? [constit cat=n number=singular] "'s";

proper-noun :=	([token case=cap] | [undefinedCap])+;

when ng		add [constit cat=ngroup pa=PA-noun];

name-ng :=	"the"? [constit cat=name pa=PA-noun];

when name-ng	add [constit cat=ngroup isName=true pa=PA-noun];

vg :=		[constit cat=tv pa=PA-verb] |
		[constit cat=w] vg-inf |
		tv-vbe vg-ving |
		tv-vhave vg-ven;

vg-inf :=	[constit cat=v pa=PA-verb] |
		"be" vg-ving;

vg-ven :=	[constit cat=ven pa=PA-verb] |
		"been" vg-ving;

vg-ving :=	[constit cat=ving pa=PA-verb];

tv-vbe :=	"is" | "are" | "was" | "were";

tv-vhave :=	"has" | "have" | "had";

when vg		add [constit cat=vgroup pa=PA-verb];

vg-pass :=	tv-vbe [constit cat=ven pa=PA-verb] |
		[constit cat=w] "not"? "be" [constit cat=ven pa=PA-verb];

when vg-pass	add [constit cat=vgroup-pass pa=PA-verb];
